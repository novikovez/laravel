<?php

namespace Unit\Users\Login;

use App\Http\Repositories\User\WhiteListIp\WhiteListIpRepository;
use App\Http\Services\User\Login\Handle\CheckWhiteListIpHandle;
use App\Http\Services\User\Login\Handle\SetAuthUserServiceHandle;
use App\Http\Services\User\Login\Helpers\GetUserID;
use App\Http\Services\User\Login\LoginDTO;
use App\Http\Services\User\UserIterator;
use Exception;
use App\Http\Repositories\User\UsersRepository;
use Tests\TestCase;

class CheckWhiteListTest extends TestCase
{
    protected WhiteListIpRepository $whiteListIpRepository;
    protected CheckWhiteListIpHandle $checkWhiteListIpHandle;
    protected LoginDTO $loginDTO;
    protected UserIterator $userIterator;


    /**
     * @throws Exception
     * @throws \PHPUnit\Framework\MockObject\Exception
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->whiteListIpRepository = $this->createMock(WhiteListIpRepository::class);
        $this->loginDTO = $this->createMock(LoginDTO::class);
        $this->userIterator = $this->createMock(UserIterator::class);
        $this->checkWhiteListIpHandle = new checkWhiteListIpHandle($this->whiteListIpRepository);

    }
    /**
     * @dataProvider Tests\Unit\Users\Login\DataProviders\ProvideDataForWhiteListHandle::LoginServiceTest()
     */
    public function testLoginService(array $data, bool $result, bool $expected): void
    {
        $loginDTO = new LoginDTO($data['email'], $data['password']);
        $loginDTO->setUserId($data['id']);


        $this->whiteListIpRepository
            ->method('checkUserIp')
            ->willReturn($result);

        $this->loginDTO
            ->method('getUserId')
            ->with($data['id']);

        $data = $this->checkWhiteListIpHandle->handle($loginDTO, function (LoginDTO $loginDTO){
            return $loginDTO;
        });
        $this->assertEquals($expected, $data->getResult());
    }
}
