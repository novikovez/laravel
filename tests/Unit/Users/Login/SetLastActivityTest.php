<?php

namespace Unit\Users\Login;

use App\Http\Repositories\User\WhiteListIp\SetActivityRepository;
use App\Http\Services\User\Login\Handle\SetLastActivityUserHandle;
use App\Http\Services\User\Login\LoginDTO;
use PHPUnit\Framework\MockObject\Exception;
use Tests\TestCase;

class SetLastActivityTest extends TestCase
{
    protected SetActivityRepository $setActivityRepository;
    protected SetLastActivityUserHandle $activityUserHandle;
    protected LoginDTO $loginDTO;

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setActivityRepository = $this->createMock(SetActivityRepository::class);
        $this->loginDTO = $this->createMock(LoginDTO::class);
        $this->activityUserHandle = new SetLastActivityUserHandle($this->setActivityRepository);


    }
    /**
     * @dataProvider Tests\Unit\Users\Login\DataProviders\ProvideDataForSetLastActivity::LoginServiceTest()
     */
    public function testLoginService(int $data, bool $result, bool $expected): void
    {
        $this->setActivityRepository
            ->method('setUserActivity')
            ->willReturn($result);

        $this->loginDTO
            ->method('getUserId')
            ->willReturn($data);

        $this->loginDTO
            ->method('getResult')
            ->willReturn($result);

        $this->activityUserHandle->handle($this->loginDTO, function (LoginDTO $loginDTO){
            return $loginDTO;
        });
        $this->assertSame($expected, $this->loginDTO->getResult());
    }
}
