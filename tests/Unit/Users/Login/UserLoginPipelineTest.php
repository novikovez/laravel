<?php

namespace Unit\Users\Login;

use App\Http\Services\User\Login\Handle\CheckValidDataHandle;
use App\Http\Services\User\Login\Handle\CheckWhiteListIpHandle;
use App\Http\Services\User\Login\Handle\SetAuthUserServiceHandle;
use App\Http\Services\User\Login\Handle\SetLastActivityUserHandle;
use App\Http\Services\User\Login\Handle\SetPersonalTokenHandle;
use App\Http\Services\User\Login\LoginDTO;
use App\Http\Services\User\Login\LoginService;
use Illuminate\Pipeline\Pipeline;
use PHPUnit\Framework\MockObject\Exception;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class UserLoginPipelineTest extends TestCase
{
    protected LoginService $loginService;
    protected MockObject $pipeline;
    protected LoginDTO $loginDTO;
    protected MockObject $checkValidDataHandler;
    protected MockObject $setAuthUserServiceHandler;
    protected MockObject $checkWhiteListIpHandler;
    protected MockObject $setLastActivityUserHandler;
    protected MockObject $setPersonalTokenHandler;
    protected const HANDLERS = [
        CheckValidDataHandle::class,
        SetAuthUserServiceHandle::class,
        CheckWhiteListIpHandle::class,
        SetLastActivityUserHandle::class,
        SetPersonalTokenHandle::class
    ];
    /**
     * A basic unit test example.
     * @throws Exception
     */

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->pipeline = $this->createMock(Pipeline::class);
        $this->loginService = new LoginService($this->pipeline);

//        $this->checkValidDataHandler = $this->createMock(CheckValidDataHandle::class);
//        $this->setAuthUserServiceHandler = $this->createMock(SetAuthUserServiceHandle::class);
//        $this->checkWhiteListIpHandler = $this->createMock(CheckWhiteListIpHandle::class);
//        $this->setLastActivityUserHandler = $this->createMock(SetLastActivityUserHandle::class);
//        $this->setPersonalTokenHandler = $this->createMock(SetPersonalTokenHandle::class);
    }

    /**
     * @dataProvider Tests\Unit\Users\Login\DataProviders\ProvideDataForLogin::LoginServiceTest()
     */

    public function testLoginService(array $data, bool $result, bool $expected): void
    {
        $dto = new LoginDTO(...$data);


        $this->pipeline
            ->method('send')
            ->with($dto)
            ->willReturnSelf($this->pipeline);

        $this->pipeline
            ->method('through')
            ->with(self::HANDLERS)
            ->willReturnSelf();

        $this->pipeline
            ->method('then')
            ->willReturn($this->pipeline);


        $result = $this->loginService->handle($dto);
        var_dump($result);
        $this->assertNull($result->getUserId());
    }
}
