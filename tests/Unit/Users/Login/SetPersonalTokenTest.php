<?php

namespace Unit\Users\Login;

use App\Http\Repositories\User\WhiteListIp\SetActivityRepository;
use App\Http\Services\User\Login\Handle\SetLastActivityUserHandle;
use App\Http\Services\User\Login\Handle\SetPersonalTokenHandle;
use App\Http\Services\User\Login\Helpers\GetToken;
use App\Http\Services\User\Login\LoginDTO;
use Laravel\Passport\PersonalAccessTokenResult;
use PHPUnit\Framework\MockObject\Exception;
use Tests\TestCase;

class SetPersonalTokenTest extends TestCase
{
    protected GetToken $getToken;
    protected SetPersonalTokenHandle $setPersonalTokenHandle;
    protected PersonalAccessTokenResult $personalAccessTokenResult;
    protected LoginDTO $loginDTO;

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->getToken = $this->createMock(GetToken::class);
        $this->personalAccessTokenResult = $this->createMock(PersonalAccessTokenResult::class);
        $this->loginDTO = $this->createMock(LoginDTO::class);
        $this->SetPersonalTokenHandle = new SetPersonalTokenHandle($this->getToken);


    }
    public function testLoginService(): void
    {
        $this->getToken
            ->method('getToken')
            ->willReturn($this->personalAccessTokenResult);

        $this->loginDTO
            ->method('getToken')
            ->willReturn($this->personalAccessTokenResult);

        $this->SetPersonalTokenHandle->handle($this->loginDTO, function (LoginDTO $loginDTO){
            return $loginDTO;
        });
        $this->assertSame(true, $this->loginDTO->getToken() instanceof PersonalAccessTokenResult);
    }
}
