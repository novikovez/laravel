<?php

namespace Unit\Users\Login;

use App\Http\Services\User\Login\Helpers\CheckAuthData;
use App\Http\Services\User\Login\LoginDTO;
use App\Http\Services\User\Login\Handle\CheckValidDataHandle;
use PHPUnit\Framework\MockObject\Exception;
use PHPUnit\Framework\MockObject\MockObject;
use Tests\TestCase;

class CheckValidDataHandleTest extends TestCase
{
    protected CheckValidDataHandle $checkValidDataHandle;
    protected CheckAuthData $checkAuthData;

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->checkAuthData = $this->createMock(CheckAuthData::class);
        $this->checkValidDataHandle = new CheckValidDataHandle($this->checkAuthData);

    }
    /**
     * @dataProvider Tests\Unit\Users\Login\DataProviders\ProvideDataForCheckValidDataHandle::LoginServiceTest()
     */
    public function testLoginService(array $data, bool $result, bool $expected): void
    {
        $loginDTO = new LoginDTO($data['email'], $data['password']);

        $this->checkAuthData
            ->method('getAuth')
            ->willReturn($result);

        $data = $this->checkValidDataHandle->handle($loginDTO, function (LoginDTO $loginDTO){
            return $loginDTO;
        });
        $this->assertSame($expected, $data->getResult());
    }
}
